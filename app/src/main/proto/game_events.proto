syntax = "proto3";
option java_package = "ru.hse";

import "game.proto";
import "google/protobuf/empty.proto";

message RoomEvent {
  oneof event {
    // ROOM EVENTS
    JoinToRoomResponse joinToRoomResponse = 1;
    OtherPlayerJoinedEvent otherPlayerJoinedEvent = 2;
    OtherPlayerDisconnectedEvent otherPlayerDisconnectedEvent = 3;
    GameStartedEvent gameStartedEvent = 4;

    // OTHER EVENTS
    PingRequest ping = 5;
  }
}

message GameEvent{
  oneof event {
    // GAME EVENTS
    GameStateUpdatedEvent gameStateUpdatedEvent = 1;
    GameFinishedEvent gameFinishedEvent = 2;
    PlayerLostEvent playerLostEvent = 3;
  }
}

// нужен, чтобы проверять подключение игроков
message PingRequest{
  bool ping = 1;
}

message JoinToRoomResponse {
  bool success = 1;
  string comment = 2;
}

message JoinToRoomRequest {
  string login = 1;
  string roomName = 2; // if empty string room is public, else it's private
}

message OtherPlayerJoinedEvent {
  string playerLogin = 1;
}

message OtherPlayerDisconnectedEvent {
  string playerLogin = 1;
}

message GameStartedEvent {
  string gameId = 1;
}

message GameStateUpdatedEvent {
  GameStateResponse gameState = 1;
}

message GameFinishedEvent {
  string reason = 1; // took place / win / defeated by
}

message PlayerLostEvent { // other player lost
  string playerLogin = 1;
}

service RoomEventService {
  rpc joinToRoom(JoinToRoomRequest) returns (stream RoomEvent);
  rpc joinToGame(JoinToGameRequest) returns (stream GameEvent);
  rpc attackBlock(AttackRequest) returns (google.protobuf.Empty);
  rpc surrender(SurrenderRequest) returns (google.protobuf.Empty);
}

message JoinToGameRequest {
  string login = 1;
  string gameId = 2;
}

message AttackRequest{
  BlockCoordinate start = 1;
  BlockCoordinate end = 2;
  bool is50 = 3;
  Player player = 4;
}

message SurrenderRequest{
  string playerLogin = 1;
}

message BlockCoordinate{
  int32 x = 1;
  int32 y = 2;
}
